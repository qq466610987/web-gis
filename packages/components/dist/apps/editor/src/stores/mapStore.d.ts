import { Map, View } from 'ol';

export declare const useMapStore: import('pinia').StoreDefinition<"map", Pick<{
    map: import('vue').Ref<{
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null, Map | {
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null>;
    currentBaseMap: import('vue').Ref<string, string>;
    initMap: (target: HTMLElement) => void;
    changeBaseMap: (type: "osm" | "satellite") => void;
}, "map" | "currentBaseMap">, Pick<{
    map: import('vue').Ref<{
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null, Map | {
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null>;
    currentBaseMap: import('vue').Ref<string, string>;
    initMap: (target: HTMLElement) => void;
    changeBaseMap: (type: "osm" | "satellite") => void;
}, never>, Pick<{
    map: import('vue').Ref<{
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null, Map | {
        on: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        once: import('ol/Map').MapEventHandler<import('ol/events').EventsKey>;
        un: import('ol/Map').MapEventHandler<void>;
        resizeObserver_: {
            disconnect: () => void;
            observe: (target: Element, options?: ResizeObserverOptions) => void;
            unobserve: (target: Element) => void;
        };
        addControl: (control: import('ol/control/Control').default) => void;
        addInteraction: (interaction: import('ol/interaction').default) => void;
        addLayer: (layer: import('ol/layer/Base').default) => void;
        addOverlay: (overlay: import('ol').default) => void;
        forEachFeatureAtPixel: <T>(pixel: import('ol/pixel').Pixel, callback: (arg0: import('ol/Feature').FeatureLike, arg1: import('ol/layer/Layer').default<import('ol/source/Source').default>, arg2: import('ol/geom').default) => T, options?: import('ol/Map').AtPixelOptions | undefined) => T | undefined;
        getFeaturesAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => Array<import('ol/Feature').FeatureLike>;
        getAllLayers: () => Array<import('ol/layer/Layer').default>;
        hasFeatureAtPixel: (pixel: import('ol/pixel').Pixel, options?: import('ol/Map').AtPixelOptions | undefined) => boolean;
        getEventCoordinate: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventCoordinateInternal: (event: MouseEvent) => import('ol/coordinate').Coordinate;
        getEventPixel: (event: UIEvent | {
            clientX: number;
            clientY: number;
        }) => import('ol/pixel').Pixel;
        getTarget: () => HTMLElement | string | undefined;
        getTargetElement: () => HTMLElement;
        getCoordinateFromPixel: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getCoordinateFromPixelInternal: (pixel: import('ol/pixel').Pixel) => import('ol/coordinate').Coordinate;
        getControls: () => import('ol').Collection<import('ol/control/Control').default>;
        getOverlays: () => import('ol').Collection<import('ol').default>;
        getOverlayById: (id: string | number) => import('ol').default;
        getInteractions: () => import('ol').Collection<import('ol/interaction').default>;
        getLayerGroup: () => import('ol/layer/Group').default;
        setLayers: (layers: Array<import('ol/layer/Base').default> | import('ol').Collection<import('ol/layer/Base').default>) => void;
        getLayers: () => import('ol').Collection<import('ol/layer/Base').default>;
        getLoadingOrNotReady: () => boolean;
        getPixelFromCoordinate: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getPixelFromCoordinateInternal: (coordinate: import('ol/coordinate').Coordinate) => import('ol/pixel').Pixel;
        getRenderer: () => import('ol/renderer/Map').default | null;
        getSize: () => import('ol/size').Size | undefined;
        getView: () => View;
        getViewport: () => HTMLElement;
        getOverlayContainer: () => HTMLElement;
        getOverlayContainerStopEvent: () => HTMLElement;
        getOwnerDocument: () => Document;
        getTilePriority: (tile: import('ol').default, tileSourceKey: string, tileCenter: import('ol/coordinate').Coordinate, tileResolution: number) => number;
        handleBrowserEvent: (browserEvent: UIEvent, type?: string | undefined) => void;
        handleMapBrowserEvent: (mapBrowserEvent: import('ol').MapBrowserEvent<any>) => void;
        isRendered: () => boolean;
        renderSync: () => void;
        redrawText: () => void;
        render: () => void;
        flushDeclutterItems: () => void;
        removeControl: (control: import('ol/control/Control').default) => import('ol/control/Control').default | undefined;
        removeInteraction: (interaction: import('ol/interaction').default) => import('ol/interaction').default | undefined;
        removeLayer: (layer: import('ol/layer/Base').default) => import('ol/layer/Base').default | undefined;
        removeOverlay: (overlay: import('ol').default) => import('ol').default | undefined;
        setLayerGroup: (layerGroup: import('ol/layer/Group').default) => void;
        setSize: (size: import('ol/size').Size | undefined) => void;
        setTarget: (target?: string | HTMLElement | undefined) => void;
        setView: (view: View | Promise<import('ol/View').ViewOptions>) => void;
        updateSize: () => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    } | null>;
    currentBaseMap: import('vue').Ref<string, string>;
    initMap: (target: HTMLElement) => void;
    changeBaseMap: (type: "osm" | "satellite") => void;
}, "initMap" | "changeBaseMap">>;
