import { default as VectorSource } from 'ol/source/Vector';
import { default as VectorLayer } from 'ol/layer/Vector';

export declare const useDrawStore: import('pinia').StoreDefinition<"draw", Pick<{
    drawSource: import('vue').Ref<{
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | {
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    drawLayer: import('vue').Ref<{
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorLayer<VectorSource<import('ol').Feature<import('ol/geom').Geometry>>> | {
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    startDraw: (type: "Point" | "LineString" | "Polygon") => void;
    stopDraw: () => void;
    initDrawLayer: () => void;
}, "drawSource" | "drawLayer">, Pick<{
    drawSource: import('vue').Ref<{
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | {
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    drawLayer: import('vue').Ref<{
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorLayer<VectorSource<import('ol').Feature<import('ol/geom').Geometry>>> | {
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    startDraw: (type: "Point" | "LineString" | "Polygon") => void;
    stopDraw: () => void;
    initDrawLayer: () => void;
}, never>, Pick<{
    drawSource: import('vue').Ref<{
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | {
        on: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        once: import('ol/source/Vector').VectorSourceOnSignature<import('ol/events').EventsKey>;
        un: import('ol/source/Vector').VectorSourceOnSignature<void>;
        addFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        addFeatures: (features: import('ol').Feature<import('ol/geom').Geometry>[]) => void;
        clear: (fast?: boolean | undefined) => void;
        forEachFeature: <T>(callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T) => T | undefined;
        forEachFeatureAtCoordinateDirect: <T_1>(coordinate: import('ol/coordinate').Coordinate, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_1) => T_1 | undefined;
        forEachFeatureInExtent: <T_2>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_2) => T_2 | undefined;
        forEachFeatureIntersectingExtent: <T_3>(extent: import('ol/extent').Extent, callback: (arg0: import('ol').Feature<import('ol/geom').Geometry>) => T_3) => T_3 | undefined;
        getFeaturesCollection: () => import('ol').Collection<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: () => import('ol').Feature<import('ol/geom').Geometry>[];
        getFeaturesAtCoordinate: (coordinate: import('ol/coordinate').Coordinate) => Array<import('ol').default>;
        getFeaturesInExtent: (extent: import('ol/extent').Extent, projection?: import('ol/proj').default | undefined) => import('ol').Feature<import('ol/geom').Geometry>[];
        getClosestFeatureToCoordinate: (coordinate: import('ol/coordinate').Coordinate, filter?: ((arg0: import('ol').Feature<import('ol/geom').Geometry>) => boolean) | undefined) => import('ol').Feature<import('ol/geom').Geometry>;
        getExtent: (extent?: import('ol/extent').Extent | undefined) => import('ol/extent').Extent;
        getFeatureById: (id: string | number) => import('ol').Feature<import('ol/geom').Geometry> | import('ol/render/Feature').default[] | null;
        getFeatureByUid: (uid: string) => import('ol').Feature<import('ol/geom').Geometry> | null;
        getFormat: () => import('ol/format/Feature').default | undefined;
        getOverlaps: () => boolean;
        getUrl: () => string | import('ol/featureloader').FeatureUrlFunction | undefined;
        hasFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => boolean;
        isEmpty: () => boolean;
        loadFeatures: (extent: import('ol/extent').Extent, resolution: number, projection: import('ol/proj').default) => void;
        removeLoadedExtent: (extent: import('ol/extent').Extent) => void;
        removeFeature: (feature: import('ol').Feature<import('ol/geom').Geometry>) => void;
        setLoader: (loader: import('ol/featureloader').FeatureLoader) => void;
        setUrl: (url: string | import('ol/featureloader').FeatureUrlFunction) => void;
        loading: boolean;
        getAttributions: () => import('ol/source/Source').Attribution | null;
        getAttributionsCollapsible: () => boolean;
        getProjection: () => import('ol/proj').default | null;
        getResolutions: (projection?: import('ol/proj').default | undefined) => Array<number> | null;
        getView: () => Promise<import('ol/View').ViewOptions>;
        getState: () => import('ol/source/Source').State;
        getWrapX: () => boolean | undefined;
        getInterpolate: () => boolean;
        refresh: () => void;
        setAttributions: (attributions: import('ol/source/Source').AttributionLike | undefined) => void;
        setState: (state: import('ol/source/Source').State) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    drawLayer: import('vue').Ref<{
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }, VectorLayer<VectorSource<import('ol').Feature<import('ol/geom').Geometry>>> | {
        getDeclutter: () => boolean;
        getRenderBuffer: () => number | undefined;
        getRenderOrder: () => (arg0: import('ol').default, arg1: import('ol').default) => number | null | undefined;
        getStyle: () => import('ol/style/Style').StyleLike | null | undefined;
        getStyleFunction: () => import('ol/style/Style').StyleFunction | undefined;
        getUpdateWhileAnimating: () => boolean;
        getUpdateWhileInteracting: () => boolean;
        renderDeclutter: (frameState: import('ol/Map').FrameState) => void;
        setRenderOrder: (renderOrder: import('ol/render').OrderFunction | null | undefined) => void;
        setStyle: (style?: import('ol/style/Style').StyleLike | import('ol/style/flat').FlatStyleLike | null | undefined) => void;
        on: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        once: import('ol/layer/Layer').LayerOnSignature<import('ol/events').EventsKey>;
        un: import('ol/layer/Layer').LayerOnSignature<void>;
        render: (frameState: import('ol/Map').FrameState | null, target: HTMLElement) => HTMLElement | null;
        getSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getRenderSource: () => VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null;
        getFeatures: (pixel: import('ol/pixel').Pixel) => Promise<Array<import('ol/Feature').FeatureLike>>;
        getData: (pixel: import('ol/pixel').Pixel) => Uint8ClampedArray | Uint8Array | Float32Array | DataView | null;
        isVisible: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => boolean;
        getAttributions: (view?: import('ol').View | import('ol/View').ViewStateLayerStateExtent | undefined) => Array<string>;
        unrender: () => void;
        setMapInternal: (map: import('ol').default | null) => void;
        getMapInternal: () => import('ol').default | null;
        setMap: (map: import('ol').default | null) => void;
        setSource: (source: VectorSource<import('ol').Feature<import('ol/geom').Geometry>> | null) => void;
        getRenderer: () => import('ol/renderer/canvas/VectorLayer').default | null;
        hasRenderer: () => boolean;
        getBackground: () => import('ol/layer/Base').BackgroundColor | false;
        getClassName: () => string;
        getLayerState: (managed?: boolean | undefined) => import('ol/layer/Layer').State;
        getLayersArray: (array?: import('ol/layer/Layer').default<import('ol/source/Source').default, import('ol/renderer/Layer').default<any>>[] | undefined) => Array<import('ol/layer/Layer').default>;
        getLayerStatesArray: (states?: import('ol/layer/Layer').State[] | undefined) => Array<import('ol/layer/Layer').State>;
        getExtent: () => import('ol/extent').Extent | undefined;
        getMaxResolution: () => number;
        getMinResolution: () => number;
        getMinZoom: () => number;
        getMaxZoom: () => number;
        getOpacity: () => number;
        getSourceState: () => import('ol/source/Source').State;
        getVisible: () => boolean;
        getZIndex: () => number | undefined;
        setBackground: (background?: import('ol/layer/Base').BackgroundColor | undefined) => void;
        setExtent: (extent: import('ol/extent').Extent | undefined) => void;
        setMaxResolution: (maxResolution: number) => void;
        setMinResolution: (minResolution: number) => void;
        setMaxZoom: (maxZoom: number) => void;
        setMinZoom: (minZoom: number) => void;
        setOpacity: (opacity: number) => void;
        setVisible: (visible: boolean) => void;
        setZIndex: (zindex: number) => void;
        get: (key: string) => any;
        getKeys: () => Array<string>;
        getProperties: () => {
            [x: string]: any;
        };
        getPropertiesInternal: () => {
            [x: string]: any;
        } | null;
        hasProperties: () => boolean;
        notify: (key: string, oldValue: any) => void;
        addChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        removeChangeListener: (key: string, listener: import('ol/events').Listener) => void;
        set: (key: string, value: any, silent?: boolean | undefined) => void;
        setProperties: (values: {
            [x: string]: any;
        }, silent?: boolean | undefined) => void;
        unset: (key: string, silent?: boolean | undefined) => void;
        changed: () => void;
        getRevision: () => number;
        addEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispatchEvent: (event: import('ol/events/Event').default | string) => boolean | undefined;
        getListeners: (type: string) => Array<import('ol/events').Listener> | undefined;
        hasListener: (type?: string | undefined) => boolean;
        removeEventListener: (type: string, listener: import('ol/events').Listener) => void;
        dispose: () => void;
    }>;
    startDraw: (type: "Point" | "LineString" | "Polygon") => void;
    stopDraw: () => void;
    initDrawLayer: () => void;
}, "startDraw" | "stopDraw" | "initDrawLayer">>;
